// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/676767ap/otus-go-hw/project/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBannerRepository is a mock of BannerRepository interface.
type MockBannerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBannerRepositoryMockRecorder
}

// MockBannerRepositoryMockRecorder is the mock recorder for MockBannerRepository.
type MockBannerRepositoryMockRecorder struct {
	mock *MockBannerRepository
}

// NewMockBannerRepository creates a new mock instance.
func NewMockBannerRepository(ctrl *gomock.Controller) *MockBannerRepository {
	mock := &MockBannerRepository{ctrl: ctrl}
	mock.recorder = &MockBannerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannerRepository) EXPECT() *MockBannerRepositoryMockRecorder {
	return m.recorder
}

// AddBannerToSlot mocks base method.
func (m *MockBannerRepository) AddBannerToSlot(bannerId, slotId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBannerToSlot", bannerId, slotId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBannerToSlot indicates an expected call of AddBannerToSlot.
func (mr *MockBannerRepositoryMockRecorder) AddBannerToSlot(bannerId, slotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannerToSlot", reflect.TypeOf((*MockBannerRepository)(nil).AddBannerToSlot), bannerId, slotId)
}

// ChooseBannerForSlot mocks base method.
func (m *MockBannerRepository) ChooseBannerForSlot(bannerId, slotId int32) (int, *entity.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseBannerForSlot", bannerId, slotId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*entity.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChooseBannerForSlot indicates an expected call of ChooseBannerForSlot.
func (mr *MockBannerRepositoryMockRecorder) ChooseBannerForSlot(bannerId, slotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseBannerForSlot", reflect.TypeOf((*MockBannerRepository)(nil).ChooseBannerForSlot), bannerId, slotId)
}

// ClickOnBanner mocks base method.
func (m *MockBannerRepository) ClickOnBanner(bannerId, slotId, socGroupId int32) (*entity.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClickOnBanner", bannerId, slotId, socGroupId)
	ret0, _ := ret[0].(*entity.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClickOnBanner indicates an expected call of ClickOnBanner.
func (mr *MockBannerRepositoryMockRecorder) ClickOnBanner(bannerId, slotId, socGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickOnBanner", reflect.TypeOf((*MockBannerRepository)(nil).ClickOnBanner), bannerId, slotId, socGroupId)
}

// RemoveBannerFromSlot mocks base method.
func (m *MockBannerRepository) RemoveBannerFromSlot(bannerId, slotId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBannerFromSlot", bannerId, slotId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBannerFromSlot indicates an expected call of RemoveBannerFromSlot.
func (mr *MockBannerRepositoryMockRecorder) RemoveBannerFromSlot(bannerId, slotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBannerFromSlot", reflect.TypeOf((*MockBannerRepository)(nil).RemoveBannerFromSlot), bannerId, slotId)
}
